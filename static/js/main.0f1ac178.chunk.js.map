{"version":3,"sources":["redux/reducers/index.js","redux/constants/action-types.js","redux/reducers/chat.js","redux/store.js","components/AppBar.jsx","redux/actions/index.js","chattingengine/chat.js","utils/random.js","components/utils/Loading.jsx","components/ConversationBox.jsx","components/Chat.jsx","redux/actions/chat.js","components/SideBar.jsx","components/Home.jsx","App.jsx","serviceWorker.js","index.js"],"names":["initialState","showBar","title","size","rootReducer","state","arguments","length","undefined","action","type","Object","assign","showing","require","chatReducer","status","questions","concat","toConsumableArray","id","from","content","question","slice","answer","waiting","reducers","combineReducers","root","chat","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","traceLimit","compose","applyMiddleware","reduxThunk","store","createStore","AppBatContainer","connect","showSidebar","dispatch","toggleSidebar","props","react_default","a","createElement","Box","tag","direction","align","justify","background","pad","left","right","vertical","elevation","style","zIndex","Heading","level","margin","react_router_dom","to","Stack","anchor","Button","icon","Notification","onClick","data","answerInChat","Promise","resolve","reject","setTimeout","reply","greetings","Math","floor","random","console","log","e","x","getRandomLoading","BubbleLoading","_ref","color","react_loading_default","height","width","ConversationBox","fromBot","item","Loading","alignContent","alignSelf","animation","flex","top","round","corner","Text","Chat","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loading","_this2","bottom","fill","gap","statuses","overflow","InfiniteScroll","items","index","components_ConversationBox","key","TextInput","primary","value","onChange","event","setState","target","Next","ask","answering","then","result","React","Component","ownProps","remote","clickingFun","renderContent","components_Chat","Collapsible","open","Layer","FormClose","Home","theme","global","colors","brand","font","family","updateDeviceSize","Grommet","full","ResponsiveContext","Consumer","components_AppBar","horizontal","react_router","path","component","components_SideBar","Boolean","location","hostname","match","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f1ac178.chunk.js","sourcesContent":["import {\n  HIDE_SIDEBAR,\n  TOGGLE_SIDEBAR,\n  SHOW_SIDEBAR,\n  DEVICE_SIZE\n} from \"../constants/action-types\";\n\nconst initialState = {\n  showBar: true,\n  title: \"Portfolio\",\n  size: \"medium\"\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HIDE_SIDEBAR:\n      return Object.assign({}, state, {\n        showBar: false\n      });\n\n    case SHOW_SIDEBAR:\n      return Object.assign({}, state, {\n        showBar: true\n      });\n\n    case TOGGLE_SIDEBAR:\n      return Object.assign({}, state, {\n        showBar: !action.showing\n      });\n    case DEVICE_SIZE:\n      return Object.assign({}, state, {\n        size: action.size\n      });\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;\n","// root\nexport const HIDE_SIDEBAR = \"HIDE_SIDEBAR\";\nexport const SHOW_SIDEBAR = \"SHOW_SIDEBAR\";\nexport const TOGGLE_SIDEBAR = \"TOGGLE_SIDEBAR\";\nexport const DEVICE_SIZE = \"DEVICE_SIZE\";\n\n//chatting\nexport const UPDATE_CHATTING = \"UPDATE_CHATTING\";\nexport const ANSWER = \"ANSWER\";\nexport const QUESTION = \"QUESTION\";\nexport const ANSWERING = \"ANSWERING\";\n","import {\n  UPDATE_CHATTING,\n  ANSWER,\n  QUESTION,\n  ANSWERING\n} from \"../constants/action-types\";\nconst data = require(\"../../data/data.json\"); // use local data as initial state\n\nconst initialState = data[\"init\"][\"chat\"];\n\nconst chatReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_CHATTING:\n      return Object.assign({}, state, {\n        status: action.status\n      });\n    case QUESTION:\n      return Object.assign({}, state, {\n        questions: [\n          ...state.questions,\n          {\n            id: state.questions.length,\n            from: action.from,\n            content: action.question\n          }\n        ]\n      });\n    case ANSWER:\n      return Object.assign({}, state, {\n        questions: [\n          ...state.questions.slice(0, state.questions.length - 1),\n          {\n            id: state.questions.length,\n            from: action.from,\n            content: action.answer\n          }\n        ]\n      });\n    case ANSWERING:\n      return Object.assign({}, state, {\n        questions: [\n          ...state.questions,\n          {\n            id: state.questions.length,\n            from: 0,\n            waiting: true,\n            content: \"\"\n          }\n        ]\n      });\n    default:\n      return state;\n  }\n};\n\nexport default chatReducer;\n","import { createStore, applyMiddleware, compose, combineReducers } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\nimport rootReducer from \"./reducers/index\";\nimport chatReducer from \"./reducers/chat\";\n\nconst reducers = combineReducers({\n  root: rootReducer,\n  chat: chatReducer\n});\nconst composeEnhancers =\n  // set the redux dev tool box\n  typeof window === \"object\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        trace: true,\n        traceLimit: 20\n      })\n    : compose;\n\nconst enhancer = composeEnhancers(applyMiddleware(reduxThunk));\n\nconst store = createStore(reducers, enhancer);\n\nexport default store;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { NavLink } from \"react-router-dom\";\nimport { Box, Heading, Button, Stack, Text } from \"grommet\";\nimport { Notification } from \"grommet-icons\";\nimport { toggleSidebar } from \"../redux/actions/index\";\n\nconst mapStateToProps = state => {\n  return {\n    title: state.root.title,\n    showSidebar: state.root.showBar\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    toggleSidebar: showing => {\n      dispatch(toggleSidebar(showing));\n    }\n  };\n};\n\n/**\n * An app header bar.\n * @param {*} props\n */\nconst AppBar = props => (\n  <Box\n    tag=\"header\"\n    direction=\"row\"\n    align=\"center\"\n    justify=\"between\"\n    background=\"brand\"\n    pad={{ left: \"medium\", right: \"left\", vertical: \"small\" }}\n    elevation=\"medium\"\n    style={{ zIndex: \"1\" }}\n    {...props}\n  >\n    <Heading level=\"3\" margin=\"none\">\n      <NavLink to={\"/\"}>{props.title + \" \" + props.showSidebar} Hi</NavLink>\n    </Heading>\n    <Stack anchor=\"top-right\">\n      {/* <Box background=\"red\" pad={{ horizontal: \"xsmall\" }} round>\n        <Text>8</Text>\n      </Box> */}\n      <Button\n        icon={<Notification />}\n        onClick={() => {\n          props.toggleSidebar(props.showSidebar);\n        }}\n      />\n    </Stack>\n  </Box>\n);\n\nconst AppBatContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AppBar);\n\nexport default AppBatContainer;\n","import {\n  HIDE_SIDEBAR,\n  SHOW_SIDEBAR,\n  TOGGLE_SIDEBAR,\n  DEVICE_SIZE\n} from \"../constants/action-types\";\n\nexport const hideSidebar = () => {\n  return {\n    type: HIDE_SIDEBAR\n  };\n};\n\nexport const showSidebar = () => {\n  return {\n    type: SHOW_SIDEBAR\n  };\n};\n\nexport const toggleSidebar = showing => {\n  return {\n    type: TOGGLE_SIDEBAR,\n    showing: showing\n  };\n};\n\nexport const updateDeviceSize = size => {\n  return {\n    type: DEVICE_SIZE,\n    size: size\n  };\n};\n","import { getRandomLoading } from \"../utils/random\";\nconst data = require(\"../data/data.json\");\n\nexport const answerInChat = question => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      try {\n        let reply =\n          data.greetings[Math.floor(Math.random() * data.greetings.length)];\n        console.log(\"resolve\" + question);\n        resolve(reply[\"content\"]);\n      } catch (e) {\n        console.log(\"reject\" + question);\n        reject(e);\n      }\n    }, getRandomLoading(3800));\n  });\n};\n\nexport async function asyncAnswer(question) {\n  const result = await answerInChat(question).catch(e => {\n    console.log(e);\n  });\n  console.log(result);\n  return result;\n}\n","export const getRandomLoading = (x = 3000) => {\n  return Math.random() * x + 1;\n};\n","import React from \"react\";\nimport ReactLoading from \"react-loading\";\n\nconst BubbleLoading = ({ type, color }) => (\n  <ReactLoading type={type} color={color} height={40} width={80} />\n);\n\nexport default BubbleLoading;\n","import React from \"react\";\nimport { Box, Text } from \"grommet/es6\";\nimport LoadingComponent from \"./utils/Loading\";\n\nconst ConversationBox = props => {\n  const fromBot = props.item.from === 0;\n\n  const getWidth = content => {\n    if (content.length >= 128) {\n      return \"medium\";\n    } else if (content.length < 16) {\n      return \"xsmall\";\n    } else {\n      return \"small\";\n    }\n  };\n\n  if (props.item.waiting) {\n    return <LoadingComponent type={\"bubbles\"} />;\n  } else {\n    return (\n      <Box\n        align={fromBot ? \"start\" : \"end\"}\n        alignContent={fromBot ? \"start\" : \"end\"}\n        alignSelf={fromBot ? \"start\" : \"end\"}\n        animation={fromBot ? \"fadeIn\" : \"slideLeft\"}\n        background={`dark-${props.item.from + 1}`}\n        flex={false}\n        justify={fromBot ? \"start\" : \"end\"}\n        margin={{\n          top: \"xsmall\",\n          left: \"\",\n          right: \"\"\n        }}\n        pad=\"small\"\n        round={fromBot ? { corner: \"right\" } : { corner: \"left\" }}\n        width={getWidth(props.item.content)}\n      >\n        <Text size=\"small\">{props.item.content}</Text>\n      </Box>\n    );\n  }\n};\n\nexport default ConversationBox;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport {\n  Icons,\n  Box,\n  Heading,\n  Button,\n  Select,\n  TextInput,\n  TextArea,\n  InfiniteScroll,\n  Text\n} from \"grommet\";\nimport { Notification, Edit, Next } from \"grommet-icons\";\nimport { updateChattingStatus } from \"../redux/actions/chat\";\n\nimport { ask, answer, answering } from \"../redux/actions/chat\";\nimport { asyncAnswer, answerInChat } from \"../chattingengine/chat\";\nimport ConversationBox from \"./ConversationBox\";\n\nclass Chat extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { question: \"\", loading: false };\n  }\n\n  render() {\n    const askAQuestion = question => {\n      this.props.ask(question);\n      this.props.answering();\n      answerInChat(question).then(result => {\n        this.props.answer(result);\n      });\n    };\n    return (\n      <Box\n        background=\"accent-3\"\n        justify=\"start\"\n        margin={{\n          top: \"medium\",\n          bottom: \"medium\",\n          left: \"large\",\n          right: \"large\"\n        }}\n        align=\"start\"\n        alignContent=\"start\"\n        alignSelf=\"center\"\n        fill=\"horizontal\"\n        height=\"700px\"\n        gap=\"small\"\n        round\n        elevation=\"medium\"\n      >\n        <Box\n          direction=\"row\"\n          align=\"center\"\n          alignContent=\"center\"\n          justify=\"center\"\n          background=\"light-2\"\n          pad={{ left: \"medium\", right: \"left\", vertical: \"small\" }}\n          elevation=\"medium\"\n          round={{ size: \"medium\", corner: \"top\" }}\n          fill=\"horizontal\"\n        >\n          <Text size=\"xsmall\">{this.props.statuses[this.props.status]}</Text>\n        </Box>\n\n        <Box fill overflow=\"auto\">\n          <InfiniteScroll items={this.props.questions}>\n            {(item, index) => <ConversationBox item={item} key={index} />}\n          </InfiniteScroll>\n        </Box>\n\n        <Box\n          direction=\"row\"\n          align=\"end\"\n          alignContent=\"start\"\n          background=\"light-4\"\n          pad={{\n            left:\n              this.props.size === \"small\" || this.props.size === \"xsmall\"\n                ? \"medium\"\n                : \"small\",\n            right:\n              this.props.size === \"small\" || this.props.size === \"xsmall\"\n                ? \"medium\"\n                : \"small\",\n            top:\n              this.props.size === \"small\" || this.props.size === \"xsmall\"\n                ? \"medium\"\n                : \"small\",\n            bottom: \"xsmall\"\n          }}\n          elevation=\"medium\"\n          round={{ size: \"medium\", corner: \"bottom\" }}\n          fill=\"horizontal\"\n        >\n          <TextInput\n            primary\n            value={this.state.question}\n            onChange={event => this.setState({ question: event.target.value })}\n          />\n\n          <Button\n            type={\"button\"}\n            icon={<Next size={\"small\"} />}\n            primary\n            margin={{ left: \"small\" }}\n            onClick={() => {\n              askAQuestion(this.state.question);\n            }}\n          />\n        </Box>\n      </Box>\n    );\n  }\n}\n\nconst mapStatusToProps = (status, ownProps) => {\n  return {\n    status: status.chat.status,\n    statuses: status.chat.statuses,\n    questions: status.chat.questions,\n    remote: status.chat.remote,\n    size: status.root.size\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    ask: question => {\n      dispatch(ask(question));\n    },\n    answer: result => {\n      console.log(result);\n      dispatch(answer(result));\n    },\n    answering: () => {\n      console.log(\"answering\");\n      dispatch(answering());\n    }\n  };\n};\n\nexport default connect(\n  mapStatusToProps,\n  mapDispatchToProps\n)(Chat);\n","import {\n  UPDATE_CHATTING,\n  QUESTION,\n  ANSWER,\n  ANSWERING\n} from \"../constants/action-types\";\n\nexport const updateChattingStatus = status => {\n  return {\n    type: UPDATE_CHATTING,\n    status: status\n  };\n};\n\nexport const ask = (question, fromWhom = 1) => {\n  return {\n    type: QUESTION,\n    question: question,\n    from: fromWhom\n  };\n};\nexport const answer = (answer, fromWhom = 0) => {\n  return {\n    type: ANSWER,\n    answer: answer,\n    from: fromWhom\n  };\n};\n\nexport const answering = () => {\n  return {\n    type: ANSWERING\n  };\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Box, Collapsible, Button, Layer } from \"grommet\";\nimport { FormClose } from \"grommet-icons\";\nimport SideContent from \"./SideContent\";\nimport Chat from \"./Chat\";\nimport { HIDE_SIDEBAR } from \"../redux/constants/action-types\";\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    showSidebar: state.root.showBar,\n    size: state.root.size\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    onClick: () => dispatch({ type: HIDE_SIDEBAR })\n  };\n};\n/**\n * A responsive sidebar.\n * @param {*} props - props from parent component. {size, showSideBar}\n */\nconst SideBar = props => {\n  const renderContent = () => {\n    return <Chat />;\n  };\n\n  const getCloseButton = clickingFun => (\n    <Box\n      background=\"light-2\"\n      tag=\"header\"\n      justify=\"end\"\n      align=\"center\"\n      direction=\"row\"\n    >\n      <Button icon={<FormClose />} onClick={clickingFun} />\n    </Box>\n  );\n\n  return (\n    <Collapsible direction=\"horizontal\" open={props.showSidebar}>\n      {props.showSidebar &&\n      (props.size === \"small\" || props.size === \"xsmall\") ? (\n        <Layer flex>\n          {getCloseButton(props.onClick)}\n          {renderContent()}\n        </Layer>\n      ) : (\n        <Box\n          flex\n          width=\"medium\"\n          elevation=\"small\"\n          align=\"center\"\n          justify=\"start\"\n        >\n          {renderContent()}\n        </Box>\n      )}\n    </Collapsible>\n  );\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SideBar);\n","import React from \"react\";\nimport { Box } from \"grommet\";\n\nconst Home = props => <Box {...props}>a home</Box>;\n\nexport default Home;\n","import React from \"react\";\nimport { BrowserRouter, Switch, Redirect, Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Box, Grommet, ResponsiveContext } from \"grommet\";\nimport \"./App.css\";\nimport AppBarContainer from \"./components/AppBar\";\nimport SideBar from \"./components/SideBar\";\nimport Home from \"./components/Home\";\nimport { updateDeviceSize } from \"./redux/actions/index\";\n\nconst theme = {\n  global: {\n    colors: {\n      brand: \"#228BE6\"\n    },\n    font: {\n      family: \"Roboto\",\n      size: \"14px\",\n      height: \"20px\"\n    }\n  }\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateDeviceSize: size => {\n      dispatch(updateDeviceSize(size));\n    }\n  };\n};\n\nexport const App = props => (\n  <BrowserRouter>\n    <Grommet theme={theme} full>\n      <ResponsiveContext.Consumer>\n        {size => {\n          props.updateDeviceSize(size);\n          return (\n            <Box fill>\n              <AppBarContainer />\n              <Box direction=\"row\" flex overflow={{ horizontal: \"hidden\" }}>\n                <Box flex align=\"center\" justify=\"center\">\n                  <Switch>\n                    {/* <Redirect exact path=\"/\" to=\"/\" /> */}\n                    <Route path=\"/\" component={Home} />\n                  </Switch>\n                </Box>\n                <SideBar />\n              </Box>\n            </Box>\n          );\n        }}\n      </ResponsiveContext.Consumer>\n    </Grommet>\n  </BrowserRouter>\n);\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}